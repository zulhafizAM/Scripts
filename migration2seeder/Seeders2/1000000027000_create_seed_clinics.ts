import BaseSeeder from '@ioc:Adonis/Lucid/Seeder';
import { DateTime } from 'luxon';
import { Faker, en } from '@faker-js/faker';
import Clinic from 'App/Models/Clinic';
import District from 'App/Models/District';

export default class extends BaseSeeder {

	public async run () {
		const districts = await District.all();
		const faker = new Faker({ locale: [en] });
		await Clinic.createMany([
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
			{
				districtId: districts![Math.floor(Math.random() * 10)].id,
				code: faker.person.fullName(),
				year: faker.number.int({ max: 10 }),
				allocatedAmount: faker.number.float({ precision: 0.01 }),
				totalClaimed: faker.number.float({ precision: 0.01 }),
				applicationDate: DateTime.fromJSDate(faker.date.past()),
				panelAppointedDate: DateTime.fromJSDate(faker.date.past()),
				panelContractEndDate: DateTime.fromJSDate(faker.date.past()),
				name: faker.person.fullName(),
				address: faker.person.fullName(),
				foundationDate: DateTime.fromJSDate(faker.date.past()),
				clinicType: faker.person.fullName(),
				ownershipStatus: faker.person.fullName(),
				registeredMedicalPractitioner: faker.person.fullName(),
				branchCount: faker.number.int({ max: 10 }),
				clinicOfficeDistance: faker.number.int({ max: 10 }),
				nearestClinicDistance: faker.number.int({ max: 10 }),
				operationHours: faker.person.fullName(),
				contactNumber: faker.person.fullName(),
				registerMedical: faker.person.fullName(),
				status: faker.person.fullName(),
				remark: faker.person.fullName(),
				active: true,
				createdBy: 'Admin'
			},
		])
	}
}
