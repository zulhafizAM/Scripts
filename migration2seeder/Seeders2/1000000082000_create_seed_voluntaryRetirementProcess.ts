import BaseSeeder from '@ioc:Adonis/Lucid/Seeder';
import { DateTime } from 'luxon';
import { Faker, en } from '@faker-js/faker';
import VoluntaryRetirementProcess from 'App/Models/VoluntaryRetirementProcess';
import VoluntaryRetirement from 'App/Models/VoluntaryRetirement';
import Employee from 'App/Models/Employee';

export default class extends BaseSeeder {

	public async run () {
		const voluntaryRetirements = await VoluntaryRetirement.all();
		const employees = await Employee.all();
		const faker = new Faker({ locale: [en] });
		await VoluntaryRetirementProcess.createMany([
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
			{
				voluntaryId: voluntaryRetirements![Math.floor(Math.random() * 10)].id,
				certifierId: employees![Math.floor(Math.random() * 10)].id,
				certifiedStatus: faker.person.firstName(),
				certifiedRemark: faker.commerce.productDescription(),
				certifiedDate: DateTime.fromJSDate(faker.date.past()),
				confirmerId: employees![Math.floor(Math.random() * 10)].id,
				confirmedStatus: faker.person.firstName(),
				confirmedRemark: faker.commerce.productDescription(),
				confirmedDate: DateTime.fromJSDate(faker.date.past()),
				supporter1Id: employees![Math.floor(Math.random() * 10)].id,
				supported1Status: faker.person.firstName(),
				supported1Remark: faker.commerce.productDescription(),
				supported1Date: DateTime.fromJSDate(faker.date.past()),
				supporter2Id: employees![Math.floor(Math.random() * 10)].id,
				supported2Status: faker.person.firstName(),
				supported2Remark: faker.commerce.productDescription(),
				supported2Date: DateTime.fromJSDate(faker.date.past()),
				appointedApproverId: employees![Math.floor(Math.random() * 10)].id,
				appointedApprovedStatus: faker.person.firstName(),
				appointedApprovedRemark: faker.commerce.productDescription(),
				appointedApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryApproverId: employees![Math.floor(Math.random() * 10)].id,
				secretaryApprovedStatus: faker.person.firstName(),
				secretaryApprovedRemark: faker.commerce.productDescription(),
				secretaryApprovedDate: DateTime.fromJSDate(faker.date.past()),
				secretaryCertifierId: employees![Math.floor(Math.random() * 10)].id,
				secretaryCertifiedStatus: faker.person.firstName(),
				secretaryCertifiedRemark: faker.commerce.productDescription(),
				secretaryCertifiedDate: DateTime.fromJSDate(faker.date.past()),
				active: true,
				createdBy: 'Admin'
			},
		])
	}
}
